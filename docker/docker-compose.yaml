## Only for local development or running tests
name: aftermarket
services:
  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - frontend_static:/srv/frontend:ro
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - ACME_EMAIL=${ACME_EMAIL:-your@email.com}
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - '55674:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-my_app}
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-my_app}',
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      target: final
    container_name: backend
    restart: always
    ports:
      - '${BACKEND_PORT:-3000}:3000'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV:-local}
      - APP_PORT=3000
      - API_PREFIX=${API_PREFIX:-/trpc}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - HOST=0.0.0.0
      - THE_ODDS_API_KEY=${THE_ODDS_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
      target: final
      args:
        - VITE_APP_URL=${VITE_APP_URL}
        - VITE_WS_URL=${VITE_WS_URL}
    container_name: frontend
    restart: always
    environment:
      - VITE_APP_URL=${VITE_APP_URL}
      - NODE_ENV=${NODE_ENV:-local}
    volumes:
      - frontend_static:/app:ro
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres:
  caddy_data:
  caddy_config:
  frontend_static:

networks:
  app-network:
    driver: bridge
